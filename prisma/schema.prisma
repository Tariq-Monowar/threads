generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @unique
  name     String?
  email    String?
  password String?
  avatar   String?
  address  String?

  // Relations
  messages      Message[]
  conversations ConversationMember[]
  messageFiles  MessageFile[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Conversation Conversation[]

  @@index([name])
  @@index([email])
  @@map("users")
}

model Conversation {
  id String @id @default(cuid())

  // name for group conversations
  name String?

  isGroup Boolean @default(false)
  avatar  String?

  // Add this for single admin
  adminId Int?
  admin   User? @relation(fields: [adminId], references: [id], onDelete: SetNull)

  // Group permissions
  /// false => only admin can add
  /// false => only admin can send messages   
  /// false => only admin can edit group name/avatar 
  allowMemberAdd     Boolean @default(false)
  allowMemberMessage Boolean @default(true)
  allowEditGroupInfo Boolean @default(false)

  // Relations
  members  ConversationMember[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}

model ConversationMember {
  id String @id @default(cuid())

  // Relations
  userId         Int?
  conversationId String
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  isAdmin Boolean @default(false)

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@unique([userId, conversationId])
  @@map("conversation_members")
}

model Message {
  id   String  @id @default(cuid())
  text String?

  // Relations
  userId         Int?
  conversationId String
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  // Soft delete - ADD THIS
  deletedForUsers Int[] @default([])

  //relations
  files String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model MessageFile {
  id String @id @default(cuid())

  //relations
  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  fileUrl       String
  fileType      String?
  fileSize      Int?
  fileExtension String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("message_files")
}
