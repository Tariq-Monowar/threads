generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @unique
  name     String?
  email    String?
  password String?
  avatar   String?
  address  String?

  // Relations
  messages      Message[]
  conversations ConversationMember[]
  deletedMessages MessageDeletion[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Conversation Conversation[]

  @@map("users")
}

model Conversation {
  id String @id @default(cuid())

  // name for group conversations
  name String?

  isGroup Boolean @default(false)
  avatar  String?

  // Add this for single admin
  adminId Int?
  admin   User? @relation(fields: [adminId], references: [id], onDelete: SetNull)

  // Group permissions
  /// false => only admin can add
  /// false => only admin can send messages   
  /// false => only admin can edit group name/avatar 
  allowMemberAdd     Boolean @default(false)
  allowMemberMessage Boolean @default(true)
  allowEditGroupInfo Boolean @default(false)

  // Relations
  members  ConversationMember[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}

model ConversationMember {
  id String @id @default(cuid())

  // Relations
  userId         Int?
  conversationId String
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  // for grup admin 
  isAdmin Boolean @default(false)
  
  // Simple deletion tracking - just 2 fields!
  isDeleted Boolean @default(false)
  deletedAt DateTime?

  @@unique([userId, conversationId])
  @@index([conversationId, isDeleted]) // High-performance index for message sending
  @@index([userId, isDeleted]) // High-performance index for conversation lists
  @@map("conversation_members")
}

model Message {
  id   String  @id @default(cuid())
  text String?

  // Relations
  userId         Int?
  conversationId String
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  // Message deletion tracking
  isDeletedForEveryone Boolean @default(false)
  deletedForEveryoneAt DateTime?
  deletedForMe        MessageDeletion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId, createdAt]) // High-performance index for message retrieval
  @@index([conversationId, isDeletedForEveryone]) // High-performance index for message filtering
  @@index([userId, createdAt]) // High-performance index for user message queries
  @@map("messages")
}

model MessageDeletion {
  id String @id @default(cuid())
  
  messageId String
  userId    Int
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  deletedAt DateTime @default(now())
  
  @@unique([messageId, userId])
  @@map("message_deletions")
}
